import { createSelector, createEntityAdapter } from "@reduxjs/toolkit";
import { apiSlice } from "../../app/api/apiSlice";

const listsAdapter = createEntityAdapter({});

const initialState = listsAdapter.getInitialState();

export const listsApiSlice = apiSlice.injectEndpoints({
    endpoints: (builder) => ({
        getLists: builder.query({
            query: () => `/lists`,
            validateStatus: (response, result) => {
                return response.status === 200 && !result.isError;
            },
            keepUnusedDataFor: 5,
            transformResponse: responseData => {
                const loadedLists = responseData.map(list => {
                    list.id = list._id;
                    return list;
                });
                return listsAdapter.setAll(initialState, loadedLists);
            },
            providesTags: (result, error, arg) => {
                if(result?.ids){
                    return [
                        {type: "List", id: "LIST"},
                        ...result.ids.map(id => ({type: "List", id}))
                    ];
                }
                else return [{type: "List", id: "LIST"}];
            }
        }),
    }),
});

export const {
    useGetListsQuery,
} = listsApiSlice;

// Returns the query result object
export const selectListsResult = listsApiSlice.endpoints.getLists.select();

// Creates memoized selector
const selectListsData = createSelector(
    selectListsResult,
    (listsResult) => listsResult?.data // normalised state object with ids and entities
);

// getSelectors creates these selectors and we rename them with aliases using destructuring
export const {
    selectAll: selectAllLists,
    selectById: selectListById,
    selectIds: selectListIds,
    // Pass in a selector that returns the lists slice of state
} = listsAdapter.getSelectors((state) => selectListsData(state) ?? initialState);